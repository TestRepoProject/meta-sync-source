name: Reusable Bandit Security Regression Check

on:
  workflow_call:
    inputs:
      target_branch_to_compare:
        description: "Branch to compare security issues against"
        required: true
        type: string
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"

jobs:
  run-bandit-scan:
    runs-on: ${{ inputs.runs_on }}
    outputs:
      bandit_pr_json: ${{ steps.scan-pr.outputs.bandit_json }}
      bandit_main_json: ${{ steps.scan-main.outputs.bandit_json }}
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          path: pr-branch

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit on PR Branch
        id: scan-pr
        working-directory: pr-branch
        run: |
          bandit -r . -f json -o ../pr_results.json || true
          echo "bandit_json=$(cat ../pr_results.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Checkout Target Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch_to_compare }}
          path: target-branch

      - name: Run Bandit on Target Branch
        id: scan-main
        working-directory: target-branch
        run: |
          bandit -r . -f json -o ../target_results.json || true
          echo "bandit_json=$(cat ../target_results.json | jq -c .)" >> $GITHUB_OUTPUT

  compare-issues:
    runs-on: ${{ inputs.runs_on }}
    needs: run-bandit-scan
    steps:
      - name: Compare Bandit JSON (new issues detection)
        run: |
          echo "${{ needs.run-bandit-scan.outputs.bandit_pr_json }}" > pr.json
          echo "${{ needs.run-bandit-scan.outputs.bandit_main_json }}" > main.json

          # Extract issue text from both
          pr_issues=$(jq '[.results[] | .issue_text]' pr.json)
          main_issues=$(jq '[.results[] | .issue_text]' main.json)

          # Show the counts
          echo "🔐 PR Bandit Issues: $(echo "$pr_issues" | jq length)"
          echo "✅ Main Bandit Issues: $(echo "$main_issues" | jq length)"

          # Find new issues
          new_issues=$(jq --argjson a "$pr_issues" --argjson b "$main_issues" -n '$a - $b')
          echo "🆕 New Issues Introduced:"
          echo "$new_issues"

          count=$(echo "$new_issues" | jq length)
          if [[ "$count" -gt 0 ]]; then
            echo "::error::PR introduces $count new security issues (from Bandit)"
            exit 1
          else
            echo "✅ No new security issues introduced."
          fi
